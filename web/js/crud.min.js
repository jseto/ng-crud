(function(){angular.module("crud",["ngRoute","ngSanitize"])})();(function(){angular.module("crud").controller("CrudCtrl",["$scope","$http","$route","$location",function($scope,$http,$route,$location){var paths=$route.current.originalPath.split("/");$scope._crud.collectionName=$route.current.collection||paths[1];$scope._crud.collectionMeta=$scope._crud.metaData[$scope._crud.collectionName];$scope._crud.action=$route.current.action||paths[2]||"read";console.log("Collection:",$scope._crud.collectionName," -  Action:",$scope._crud.action);switch($scope._crud.action){case"create":$scope.item={};break;case"read":$http.get("/data/"+$scope._crud.collectionName).success(function(data){$scope.$parent.items=data.items});break;case"update":$scope.item=$scope.$parent.items[$route.current.params.id];break;default:throw new Error("Invalid action: "+$scope._crud.action)}$scope.doSubmit=function(){var verb=$scope._crud.action=="create"?"post":"put";httpAction(verb,$scope.item)};$scope.doDelete=function(modalId){$("#"+modalId).on("hidden.bs.modal",function(){console.log("Deleting ",$scope.toDelete);httpAction("delete",undefined,"/"+$scope.toDelete._id).success(function(){$route.reload()})})};$scope.prepareDelete=function(idx){$scope.toDelete=$scope.$parent.items[idx]}}]);function httpAction(verb,item,extraPath){extraPath=extraPath||"";return $http[verb]("/data/"+$scope._crud.collectionName+extraPath,item).success(function(data){console.log(verb.toUpperCase()+" OK: ",data);$location.path($scope._crud.collectionName)}).error(function(data,status,headers,config){console.error(verb.toUpperCase()+" Error: ",data,status,headers,config)})}})();(function(){angular.module("crud").directive("crudInput",function(){return{restrict:"E",scope:formInputScope,link:formInputLink,template:formInputHeader+'<input ng-model="model" class="form-control" id="{{fullId}}" placeholder="{{placeholder}}">'+formInputFooter}}).directive("crudTextArea",function(){return{restrict:"E",scope:formInputScope,link:formInputLink,template:formInputHeader+'<textarea ng-model="model" class="form-control" id="{{fullId}}" placeholder="{{placeholder}}">'+"</textarea>"+formInputFooter}}).directive("crudSelect",function(){return{restrict:"E",scope:formInputScope,link:function(scope,element,attrs){formInputLink(scope,element,attrs);var fieldMeta=scope.$parent.$eval("_crud.collectionMeta.fields[field]");scope[attrs.id+"_listModel"]=fieldMeta.listModel},template:formInputHeader+'<select ng-model="model" class="form-control" id="{{fullId}}" '+'ng-options="option.label for option in {{id}}_listModel">'+"</select>"+formInputFooter}}).directive("crudFormButtons",function(){return{restrict:"E",template:'<div class="form-group">'+'<div class="col-sm-12 text-center">'+'<button type="button" class="btn btn-primary" ng-click="doSubmit()">'+"{{ action == 'create' ? 'Create' : 'Update' }}"+"</button>"+"&nbsp;"+'<a href="#/{{_crud.collectionName}}" class="btn btn-default">Cancel</a>'+"</div>"+"</div>"}}).directive("crudTable",function(){return{restrict:"E",templateUrl:"templates/crud-table.html"}}).directive("crudFormInput",["$compile",function($compile){return{restrict:"E",link:function(scope,element,attrs){var fieldMeta=scope.$eval("_crud.collectionMeta.fields[field]");var tag=fieldMeta.inputType;var html="<"+tag+' id="crud_{{field}}" '+'label="{{_crud.collectionMeta.fields[field].label}}" '+'placeholder="{{_crud.collectionMeta.fields[field].placeholder}}" model="item[field]" '+"autofocus=\"{{ $first ? 'true' : 'false' }}\"";var inputAttrs=fieldMeta.inputAttrs;for(var prop in inputAttrs)if(inputAttrs.hasOwnProperty(prop))html+=" "+prop+'="'+inputAttrs[prop]+'"';html+="></"+tag+">";element.append($compile(html)(scope))}}}]);var formInputScope={label:"@",placeholder:"@",model:"=",id:"@",autofocus:"@",fullId:"@"};var formInputLink=function(scope,element,attrs){var inputElement=element.find(".form-control");if(attrs.hasOwnProperty("autofocus")&&attrs.autofocus!="false"){setTimeout(function(){inputElement.focus()})}for(var prop in attrs)if(attrs.hasOwnProperty(prop)&&prop[0]!="$"&&!scope[prop])inputElement.attr(prop,attrs[prop]);scope.fullId=scope.id+"_"+scope.$parent._crud.idCount++};var formInputHeader='<div class="form-group">'+'<label for="{{fullId}}" class="col-sm-3 control-label">{{label}}</label>'+'<div class="col-sm-9">';var formInputFooter="</div></div>"})();(function(){angular.module("crud").filter("singular",["crud",function(crud){return crud.singularize}])})();(function(){angular.module("crud").provider("crud",function(){this.$get=function(){return{setMetaData:setMetaData,singularize:singularize}};this.routesForCollection=routesForCollection});function setMetaData($scope,collectionMetadata){completeMetadataDefaults(collectionMetadata);$scope._crud=$scope._crud||{};$scope._crud.metaData=collectionMetadata;$scope._crud.idCount=$scope._crud.idCount||0}function completeMetadataDefaults(metadata){for(var collName in metadata)if(metadata.hasOwnProperty(collName)){var collMeta=metadata[collName];collMeta.collection=collName;if(!collMeta.tableName)collMeta.tableName=ucFirst(collName);if(!collMeta.itemName)collMeta.itemName=singularize(collName);if(!collMeta.fieldOrder)collMeta.fieldOrder=Object.keys(collMeta.fields);for(var i=0;i<collMeta.fieldOrder.length;i++){completeFieldDefaults(collMeta.fields,collMeta.fieldOrder[i])}}}function completeFieldDefaults(fields,name){var field=fields[name];if(field.label===undefined)field.label=ucFirst(name);if(!field.inputType)field.inputType="crud-input";if(!field.inputAttrs)field.inputAttrs={};if(field.colLabel===undefined)field.colLabel=field.label;if(!field.cellRender)field.cellRender=identity;if(field.showInTable===undefined)field.showInTable=true}function identity(x){return x}function ucFirst(str){return str.charAt(0).toUpperCase()+str.substr(1)}function singularize(plural){plural=plural.toLowerCase();if(plural[plural.length-1]=="s")return plural.substr(0,plural.length-1);var irregulars={mice:"mouse",teeth:"tooth"};var singular=irregulars[plural];if(!singular)console.warn('Warning: singular of "',plural,'" not found');return singular?singular:plural}function routesForCollection($routeProvider,collection,ctrl){ctrl=ctrl||"CrudCtrl";$routeProvider.when("/"+collection,{templateUrl:"templates/crud-table-view.html",controller:ctrl}).when("/"+collection+"/create",{templateUrl:"templates/crud-form-view.html",controller:ctrl}).when("/"+collection+"/update/:id",{templateUrl:"templates/crud-form-view.html",controller:ctrl})}})();
//# sourceMappingURL=crud.js.map